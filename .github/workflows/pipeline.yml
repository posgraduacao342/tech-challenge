name: Java CI with Maven

on:
  workflow_dispatch:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      env:
        DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
        DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
        DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
        MP_WEBHOOK: ${{ secrets.MP_WEBHOOK }}
        MP_TOKEN: ${{ secrets.MP_TOKEN }}
      run: mvn -B package --file pom.xml

    # - name: Cache SonarCloud packages
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.sonar/cache
    #     key: ${{ runner.os }}-sonar
    #     restore-keys: ${{ runner.os }}-sonar

    # - name: Cache Maven packages
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.m2
    #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    #     restore-keys: ${{ runner.os }}-m2

    # - name: Build and analyze
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
    #     DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
    #     DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
    #     MP_WEBHOOK: ${{ secrets.MP_WEBHOOK }}
    #     MP_TOKEN: ${{ secrets.MP_TOKEN }}
    #   run: mvn -B package --file pom.xml && mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=posgraduacao342_tech-challenge

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR if not exists
      run: |
        aws ecr create-repository --repository-name tech-challenge-ecr || exit 0

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tech-challenge-ecr
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f docker/Dockerfile .
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

    - name: Configure kubectl
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region us-east-1

    - name: Deploy to EKS
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        kubectl apply -f pipeline/dev/application
        kubectl apply -f pipeline/dev/postgress
